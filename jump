Q1 문자열 바꾸기
a="a:b:c:d"
a.split(':')
"#".join(a.split(':'))
Q2 딕셔너리 값 추출하기
a={'A':90,'B':80}
a.get('C','70')
Q3 리스트의 더하기와 extend 함수
a=[1,2,3]
b=[3,4,5]
Q4 리스트 총합 구하기
A=[20,55,67,82,45,33,90,87,100,25]
sum=0
while A:
    mark=A.pop()
    if mark>=50:
        sum +=mark
print(sum)
Q5 피보나치 함수
def fib(n):
    if n==0 : return 0
    if n==1 : return 1
    return fib(n-2)+fib(n-1)

for i in range(10):
    print(fib(i))
Q6 숫자의 총합 구하기
def sum(*args):
    result = 0
    for i in args:
        result = (result+i)
    return result
sum(65,45,2,3,45,8)
Q7 한 줄 구구단
user_input=input("구구단을 출력할 숫자를 입력하세요(2~9):")

Q8 역순 저장

f=open('abc.txt','r')
lines=f.readlines()
f.close

lines.reverse()

f=open('abc.txt','w')
for line in lines:
    line=line.strip()
    f.write(line)
    f.write('\n')
f.close()
dan=int(user_input)
for i in range(1,10):
    print(i*dan,end=' ')

Q9 평균값 구하기

f=open('sample.txt','r')
lines=f.readlines()
f.close


total=0
for line in lines:
    score=int(line)
    total +=score
average=total/len(lines)

f=open('result.txt','w')
f.write(str(average))
f.close()

Q10 사칙연산 계산기

class Calculator:
    def __init__(self,numberList):
        self.numberList=numberList
        
    def sum(self):
        result=0
        for num in self.numberList:
            result += num
        return result
    
    def avg(self):
        total=self.sum()
        return total/len(self.numberList)

cal1=Calculator([1,2,3,4,5])
print(cal1.sum())
print(cal1.avg())

cal2=Calculator([6,7,8,9,10])
print(cal2.sum())
print(cal2.avg())

Q13 DashInsert 함수

data="4546793"
numbers=list(map(int,data))
result=[]

for i, num in enumerate(numbers):
    result.append(str(num))
    if i<len(numbers)-1:
        is_odd=num%2==1
        is_next_odd=numbers[i+1]%2==1
        if is_odd and is_next_odd:
            result.append("-")
        elif not is_odd and not is_next_odd:
            result.append("*")
    
print("".join(result))

Q14 문자열 압축하기

def compress_string(s):
    _c=""
    cnt=0
    result=""
    for c in s:
        if c!=_c:
            _c=c
            if cnt: result += str(cnt)
            result += c
            cnt=1
        else:
            cnt +=1
    if cnt: result += str(cnt)
    return result
	
Q15 Duplicate Numbers¶

def chkDupNum(s):
    result=[]
    for num in s:
        if num not in result:
            result.append(num)
        else:
            return
    return len(result) == 10
	
Q16 모스 부호 해독

dic = {
    '.-':'A','-...':'B','-.-.':'C','-..':'D','.':'E','..-.':'F',
    '--.':'G','....':'H','..':'I','.---':'J','-.-':'K','.-..':'L',
    '--':'M','-.':'N','---':'O','.--.':'P','--.-':'Q','.-.':'R',
    '...':'S','-':'T','..-':'U','...-':'V','.--':'W','-..-':'X',
    '-.--':'Y','--..':'Z'
}

def morse(src):
    result = []
    for word in src.split("  "):
        for char in word.split(" "):
            result.append(dic[char])
        result.append(" ")
    return "".join(result)


print(morse('.... .  ... .-.. . . .--. ...  . .- .-. .-.. -.--'))

Q18 문자열 검색

import re
p=re.compile("[a-z]+")
m=p.search("5 python")
m.start()+m.end()

Q19 그루핑

import re 

data = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

pat = re.compile(r"(\w+\s+)(\d+[-]\d+)[-](\d+)")
print(pat.sub("\g<1>\g<2>-****", data))

Q20 전방 탐색

import re

pat = re.compile(".*[@].*[.](?=com$|net$).*$")

print(pat.match("pahkey@gmail.com"))
print(pat.match("kim@daum.net"))
print(pat.match("lee@myhome.co.kr"))
